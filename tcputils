import struct

FLAG_TERMINAR = 1 << 0
FLAG_SINCRONIZAR = 1 << 1
FLAG_RESET = 1 << 2
FLAG_CONFIRMACAO = 1 << 4

TAMANHO_MAXIMO = 1460

def construir_cabecalho(origem, destino, sequencia, confirmacao, bandeiras):
    return struct.pack('!HHIIHHHH',
                       origem, destino, sequencia, confirmacao,
                       (5 << 12) | bandeiras, 8 * TAMANHO_MAXIMO, 0, 0)

def ler_cabecalho(segmento):
    origem, destino, sequencia, confirmacao,
    flags, janela, verificador, urgente = struct.unpack('!HHIIHHHH', segmento[:20])
    return origem, destino, sequencia, confirmacao, flags, janela, verificador, urgente

def calcular_checksum(segmento, origem_ip=None, destino_ip=None):
    if origem_ip is None and destino_ip is None:
        dados = segmento
    else:
        pseudo = converter_para_binario(origem_ip) + converter_para_binario(destino_ip) + struct.pack('!HH', 0x0006, len(segmento))
        dados = pseudo + segmento

    if len(dados) % 2 == 1:
        dados += b'\x00'

    soma = 0
    for i in range(0, len(dados), 2):
        valor, = struct.unpack('!H', dados[i:i+2])
        soma += valor
        while soma > 0xffff:
            soma = (soma & 0xffff) + 1
    return (~soma) & 0xffff

def corrigir_checksum(segmento, origem_ip, destino_ip):
    modificavel = bytearray(segmento)
    modificavel[16:18] = b'\x00\x00'
    modificavel[16:18] = struct.pack('!H', calcular_checksum(modificavel, origem_ip, destino_ip))
    return bytes(modificavel)

def converter_para_string(endereco):
    return '%d.%d.%d.%d' % tuple(int(x) for x in endereco)

def converter_para_binario(endereco):
    return bytes(int(x) for x in endereco.split('.'))
